Eber de Souza Silva Junior - Primeiro sem DSM
Lista XII

# G. verbing
# Dada uma string, caso seu comprimento seja pelo menos 3,
# adiciona 'ing' no final
# Caso a string já termine em 'ing', acrescentará 'ly'.
def verbing(s):
  if len(s) < 3:
    return s
  elif s[-3:] == 'ing':
    return s + 'ly'
  else:
    return s + 'ing'

# H. not_bad
# Dada uma string, procura a primeira ocorrência de 'not' e 'bad'
# Se 'bad' aparece depois de 'not' troca 'not' ... 'bad' por 'good'
# Assim 'This dinner is not that bad!' retorna 'This dinner is good!'
def not_bad(s):
  no = s.find('not')
  bad = s.find('bad')
  if no < bad:
    s = s[:no] + 'good' + s[bad+3:]
  return s

# I. inicio_final
# Divida cada string em dois pedaços.
# Se a string tiver um número ímpar de caracteres
# o primeiro pedaço terá um caracter a mais,
# Exemplo: 'abcde', divide-se em 'abc' e 'de'.
# Dadas 2 strings, a e b, retorna a string
# a_inicio + b_inicio + a_final + b_final
def inicio_final(a, b):
  a_meio = int(len(a)/2)
  b_meio = int(len(b)/2)
  if len(a) % 2 != 0:
    a_meio = a_meio + 1
  if len(b) % 2 != 0:
    b_meio = b_meio + 1
  return a[:a_meio] + b[:b_meio] + a[a_meio:] + b[b_meio:]

# J. zeros finais
# Verifique quantos zeros há no final de um número inteiro positivo
# Exemplo: 10010 tem 1 zero no fim e 908007000 possui três
def zf(n):
    n = str(n)[::-1]
    cont = 0
    while n[cont] == "0":
        cont = cont + 1
    return cont

# K. conta 2
# Verifique quantas vezes o dígito 2 aparece entre 0 e n-1
# Exemplo: para n = 20 o dígito 2 aparece duas vezes entre 0 e 19
def conta2(n):
  cont = 0
  for num in range(n-1):
    for x in str(num):
      if x == '2':
        cont = cont + 1
  return cont


# L. inicio em potencia de 2
# Dado um número inteiro positivo n retorne a primeira potência de 2
# que tenha o início igual a n
# Exemplo: para n = 65 retornará 16 pois 2**16 = 65536
def inip2(n):
    pot = 0
    while True:
        if str(2 ** pot).startswith(str(n)):
            return pot
        pot = pot + 1